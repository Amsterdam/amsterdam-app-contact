trigger:
  batch: true
  branches:
    include:
    - main
  tags:
    include:
    - refs/tags/* 

resources:
  - repo: self

pool: containerBuilder

variables:
  RegistryName: saks01weuacrpgpgo5qvmwo
  RepositoryName: aapp/images
  ImageName: contact
  ImageVersion: 1.0.2
  HELM_EXPERIMENTAL_OCI: 1
  
          
stages:
  - stage: Build
    displayName: Build and push stage
    #condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
      - job: Build
        displayName: Build
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        steps:
        - task: Bash@3
          displayName: Check if tag present
          inputs:
              targetType: 'inline'
              script: |
                    echo "Tag: $(Build.SourceBranchName)"
                    az login --identity
                    az acr login --name $(RegistryName)
                    az acr repository list --name $(RegistryName)
                    TAG_EXISTS=$(az acr repository show --name $(RegistryName) --image $(RepositoryName)/$(ImageName):$(Build.SourceBranchName))
                  
                    if [ -n "${TAG_EXISTS}" ]; then
                      echo 'Tag $(Build.SourceBranchName) exists. Exiting pipeline.'
                      exit 1
                    fi   
        - task: Bash@3
          displayName: Build and push an image to container registry
          inputs:
              targetType: 'inline'
              script: |
                    az acr repository list --name $(RegistryName)
                    docker build -t $(RegistryName).azurecr.io/$(RepositoryName)/$(ImageName):$(Build.SourceBranchName) .
                    docker push $(RegistryName).azurecr.io/$(RepositoryName)/$(ImageName):$(Build.SourceBranchName)
                    docker build -t $(RegistryName).azurecr.io/$(RepositoryName)/$(ImageName):latest .
                    docker push $(RegistryName).azurecr.io/$(RepositoryName)/$(ImageName):latest
                    az acr repository show-tags --name $(RegistryName) --repository $(RepositoryName)/$(ImageName)

      # - job: "Push_to_Github"
      #   timeoutInMinutes: 30
      #   pool:
      #     vmImage: macOS-12
      #   variables:
      #     - group: github-authorization
      #   steps:
      #     - template: ./pipelines/templates/push-repo-to-github.yml
      #       parameters:
      #         repository: "amsterdam-app-contact"
      #         sshKeySecureFile: "Contact-github-ssh"
      #         sshPublicKey: $(sshPublicKeyContact)
